---

airflow_version: '1.9.0'

# Control which part of Airflow is deployed: master = webserver + database
airflow_install_master: true
airflow_install_agent: true

python_location: '/usr/bin/python'
python_pip: '/usr/bin/pip'
airflow_python: '{{ python_location }}'
airflow_pip: '{{ python_pip }}'
airflow_python_local_dist_packages: '/usr/local/lib/python2.7/dist-packages'
airflow_python_libraries_path: '{{ airflow_python_local_dist_packages }}'

airflow_user: 'airflow'
# airflow_user_id:
# airflow_user_groups:
airflow_group: 'airflow'
# airflow_group_id:

airflow_home: '/usr/local/airflow'
airflow_config: '{{ airflow_home }}/airflow.cfg'

airflow_scheduler_cpus: 0.2
airflow_scheduler_mem: 364.0
airflow_webserver_cpus: 0.2
airflow_webserver_mem: 256.0

# The folder where your airflow pipelines live, most likely a
# subfolder in a code repository
airflow_dags_folder: '{{ airflow_home }}/dags'

# The folder where airflow should store its log files. This location
airflow_base_log_folder: '{{ airflow_home }}/logs'

# Airflow can store logs remotely in AWS S3 or Google Cloud Storage. Users
# must supply a remote location URL (starting with either 's3://...' or
# 'gs://...') and an Airflow connection id that provides access to the storage
# location.
airflow_remote_base_log_folder: ''
airflow_remote_log_conn_id: ''

# The executor class that airflow should use. Choices include
# SequentialExecutor, LocalExecutor, CeleryExecutor, MesosExecutor
airflow_executor: 'LocalExecutor'

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
#airflow_sql_alchemy_conn: 'mysql://airflow:airflow@mysql/airflow'
airflow_sql_alchemy_conn: 'postgresql://airflow:airflow@postgresql/airflow'

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool.
airflow_sql_alchemy_pool_size: 5

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite.
airflow_sql_alchemy_pool_recycle: 3600

# The amount of parallelism as a setting to the executor. This defines
# the max number of task instances that should run simultaneously
# on this airflow installation
airflow_parallelism: 32

# The number of task instances allowed to run concurrently by the scheduler
airflow_dag_concurrency: 16

# Are DAGs paused by default at creation
airflow_dags_are_paused_at_creation: False

# When not using pools, tasks are run in the "default pool",
# whose size is guided by this config element
airflow_non_pooled_task_slot_count: 128

# The maximum number of active DAG runs per DAG
airflow_max_active_runs_per_dag: 16

# Whether to load the examples that ship with Airflow. It's good to
# get started, but you probably want to set this to False in a production
# environment
airflow_load_examples: True

# Where your Airflow plugins are stored
airflow_plugins_folder: '{{ airflow_home }}/plugins'

# Secret key to save connection passwords in the db
#airflow_fernet_key = $FERNET_KEY - autogenerated

# Whether to disable pickling dags
airflow_donot_pickle: False

# How long before timing out a python file import while filling the DagBag
airflow_dagbag_import_timeout: 30

# The default owner assigned to each new operator, unless
# provided explicitly or passed via `default_args`
airflow_operators_default_owner: 'Airflow'

# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is use in automated emails that
# airflow sends to point links to the right web server
airflow_web_base_url: 'http://localhost:8080'

# The ip specified when starting the web server
airflow_web_server_host: '0.0.0.0'

# The port on which to run the web server
airflow_web_server_port: 8080

# The time the gunicorn webserver waits before timing out on a worker
airflow_web_server_worker_timeout: 120

# Secret key used to run your flask app
airflow_web_secret_key: 'temporary_key'

# Number of workers to run the Gunicorn web server
airflow_web_workers: 4

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
airflow_web_worker_class: 'sync'

# Expose the configuration file in the web server
airflow_web_expose_config: True

# Set to true to turn on authentication : http://pythonhosted.org/airflow/installation.html#web-authentication
airflow_web_authenticate: False

# Filter the list of dags by owner name (requires authentication to be enabled)
airflow_web_filter_by_owner: False

airflow_email_backend: 'airflow.utils.email.send_email_smtp'

# If you want airflow to send emails on retries, failure, and you want to
# the airflow.utils.send_email function, you have to configure an smtp
# server here
#airflow_smtp_host = localhost
airflow_smtp_starttls: True
airflow_smtp_ssl: False
airflow_smtp_port: 25
#airflow_smtp_user: 'airflow'
#airflow_smtp_password: 'airflow'
airflow_smtp_mail_from: 'airflow@airflow.local'

# This section only applies if you are using the CeleryExecutor in
# [core] section above

# The app name that will be used by celery
airflow_celery_app_name: 'airflow.executors.celery_executor'

# The concurrency that will be used when starting workers with the
# "airflow worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
airflow_celeryd_concurrency: 16

# When you start an airflow worker, airflow starts a tiny web server
# subprocess to serve the workers local log files to the airflow main
# web server, who then builds pages and sends them to users. This defines
# the port on which the logs are served. It needs to be unused, and open
# visible from the main web server to connect into the workers.
airflow_celery_worker_log_server_port: 8793

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
airflow_celery_broker_url: 'amqp://airflow:airflow@rabbitmq:5672/airflow'

# Another key Celery setting
airflow_celery_result_backend: 'amqp://airflow:airflow@rabbitmq:5672/airflow'

# Celery Flower is a sweet UI for Celery. Airflow has a shortcut to start
# it `airflow flower`. This defines the port that Celery Flower runs on
airflow_celery_flower_port: 5555

# Default queue that tasks get assigned to and that worker listen on.
airflow_celery_default_queue: 'default'

# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
airflow_job_heartbeat_sec: 5

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
airflow_scheduler_heartbeat_sec: 5

# Local task jobs periodically heartbeat to the DB. If the job has
# not heartbeat in this many seconds, the scheduler will mark the
# associated task instance as failed and will re-schedule the task.
airflow_scheduler_zombie_task_threshold: 300

# The scheduler can run multiple threads in parallel to schedule dags.
# This defines how many threads will run. However airflow will never
# use more threads than the amount of cpu cores available.
airflow_scheduler_max_threads: 2

# Statsd (https://github.com/etsy/statsd) integration settings
airflow_statsd_on: False
airflow_statsd_host: 'localhost'
airflow_statsd_port: 8125
airflow_statsd_prefix: 'airflow'

# Mesos master address which MesosExecutor will connect to.
airflow_mesos_master: 'localhost:5050'

# The framework name which Airflow scheduler will register itself as on mesos
airflow_mesos_framework_name: 'Airflow'

# Number of cpu cores required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
airflow_mesos_task_cpu: 1

# Memory in MB required for running one task instance using
# 'airflow run <dag_id> <task_id> <execution_date> --local -p <pickle_id>'
# command on a mesos slave
airflow_mesos_task_memory: 256

# Enable framework checkpointing for mesos
# See http://mesos.apache.org/documentation/latest/slave-recovery/
airflow_mesos_checkpoint: False

# Failover timeout in milliseconds.
# When checkpointing is enabled and this option is set, Mesos waits until the configured timeout for
# the MesosExecutor framework to re-register after a failover. Mesos shuts down running tasks if the
# MesosExecutor framework fails to re-register within this timeframe.
airflow_mesos_failover_timeout: 604800

# Enable framework authentication for mesos
# See http://mesos.apache.org/documentation/latest/configuration/
airflow_mesos_authenticate: False

# Mesos credentials, if authentication is enabled
airflow_mesos_default_principal: 'admin'
airflow_mesos_default_secret: 'admin'

airflow_plugins:
  - name: celery
    required_debs: []
    required_pips: []
    required_yums: []
  - name: postgresql
    required_debs:
      - postgresql-client
      - python-psycopg2
    required_yums:
      - postgresql
      - python-psycopg2
    required_pips: []
  #- name: mysql
  #  required_debs:
  #    - libmysqlclient18
  #    - libmysqlclient-dev
  #  required_pips:
  #    - PyMySQL
  - name: crypto
    required_debs:
      - libssl-dev
      - python-cryptography
    required_yums:
      - openssl-devel
      - python-cryptography
    required_pips: []
  - name: ldap
    required_debs:
      - libkrb5-dev
      - libsasl2-dev
    required_yums:
      - krb5-devel
      - libgsasl-devel
    required_pips: []

# Startup method. One of service, marathon
airflow_startup: 'service'

# Version of Marathon used to start Airflow
marathon_version: "1.4.1"

# Pin Airflow scheduler to a particular host as it needs to store its files in a known place. The hostname should be the name known by Marathon / Mesos
airflow_scheduler_marathon_host: '{{ marathon_hostname }}'

airflow_scheduler_marathon_id: '/airflow/scheduler'
airflow_scheduler_marathon_constraints: [["hostname", "CLUSTER", "{{ airflow_scheduler_marathon_host | trim }}"]]
airflow_scheduler_marathon_dependencies:
  - "{{ airflow_db_marathon_id }}"

airflow_scheduler_newerthan_file: '/tmp/newerthan'
# Expected minimum period during which we can observe some activity in the logs.
# The time format should be compatible with touch --date parameter
airflow_scheduler_expected_activity_period: '2 hours'

# Pin Airflow webserver to a particular host as it needs to store its files in a known place. The hostname should be the name known by Marathon / Mesos
airflow_webserver_marathon_host: '{{ marathon_hostname }}'

airflow_webserver_marathon_id: '/airflow/webserver'
airflow_webserver_marathon_constraints: [["hostname", "CLUSTER", "{{ airflow_webserver_marathon_host | trim }}"]]
airflow_webserver_marathon_dependencies:
  - "{{ airflow_db_marathon_id }}"
  - "{{ airflow_scheduler_marathon_id }}"

airflow_db_marathon_id: /airflow/db

# Additional settings added to airflow.cfg
airflow_extra_settings:
  - section: mysection
    parameters:
      mykey: myvalue
      myotherkey: anothervalue

airflow_deb_packages:
  - netcat
  - curl
  - python-pip
  - python-dev
  - build-essential
  - locales
  - libffi-dev
  - libssl-dev

# python2-crypto needed to generate Fernet keys with ansible
airflow_yum_packages:
  - curl
  - python2-crypto
  - python-pip
  - gcc
  - libffi-devel
  - python-devel
  - openssl-devel

# Python 3 and Ubuntu 16.04
#  airflow_deb_packages:
#    - netcat
#    - curl
#    - python3-pip
#    - python3-dev
#    - build-essential
#    - locales
#    - libffi-dev
#    - libssl-dev

airflow_required_pip_packages:
  - "pytz==2015.7"
  - pyOpenSSL
  - ndg-httpsclient
  - pyasn1

airflow_additional_pip_packages: []

airflow_bin_path: >
  {% if ansible_os_family == 'Debian' or airflow_version is version('1.8.0', '<') %}/usr/local/bin/airflow{% else %}/usr/bin/airflow{% endif %}
airflow_pip_package_name: "{% if airflow_version is version('1.8.1', '>=') %}apache-airflow{% else %}airflow{% endif %}"

# List of slot pools to create in Airflow (similar to using the Pools menu in Airflow webserver)
airflow_slot_pools: []
#  - name:
#    slots:
#    description:

# List of variables to create in Airflow (similar to using the Variables menu in Airflow webserver)
airflow_variables: []
#  - key:
#    value:

# List of Git url and destination folder to download or update code for the DAGs or plugins used by Airflow
airflow_scripts: []
#  - url:
#    version: latest
#    verify_commit: False
#    key_file: None
#    post_installation_script: None
#    dest:

# List of additional work directories to create for Airflow and its DAGs.
airflow_work_dirs: []

# path to lib_role
airflow_path_to_lib_role: "{{ lib_roles_path|default(playbook_dir + '/roles') }}"
